<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
>
    <!-- 加载注解驱动 -->
    <context:annotation-config/>
    <!-- 扫描路径 -->
    <context:component-scan base-package="com.fan.controller"/>
    <context:component-scan base-package="com.fan.config"/>
    <context:component-scan base-package="com.fan.timetask"/>
    <context:component-scan base-package="com.fan.remote"/>

    <!-- 引入配置文件 -->
    <bean class="com.fan.util.EncryptPropertyPlaceholderConfigurer">
        <!--locations能配置多个properties文件，location只能配置一个-->
        <property name="locations" value="classpath:config/*.properties"/>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>

    <!--国际化配置自定义语言拦截器-->
    <mvc:interceptors>
        <bean id="localeChangeInterceptor" class="com.fan.interceptors.LanguageInterceptor">
            <property name="paramName" value="language"/>
        </bean>
    </mvc:interceptors>
    <!-- 基于request实现资源国际化 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>


    <mvc:interceptors>
        <!--API拦截器，配合自定义标签使用-->
        <mvc:interceptor>
            <mvc:mapping path="/api/**"/>
            <bean id="apiInterceptor" class="com.fan.interceptors.ApiInterceptor"/>
        </mvc:interceptor>

        <!--<mvc:interceptor>
            &lt;!&ndash;登录拦截器&ndash;&gt;
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/web/user/*/register"/>
            <mvc:exclude-mapping path="/web/user/*/login"/>
            <mvc:exclude-mapping path="/api/**"/>&lt;!&ndash;对外接口&ndash;&gt;
            <mvc:exclude-mapping path="/wx/**"/>&lt;!&ndash;微信接口&ndash;&gt;
            <mvc:exclude-mapping path="/swagger-resources/**"/>&lt;!&ndash; swagger静态资源&ndash;&gt;
            <mvc:exclude-mapping path="/webjars/**"/>&lt;!&ndash; swagger静态资源&ndash;&gt;
            <mvc:exclude-mapping path="/v2/**"/>&lt;!&ndash; swagger静态资源&ndash;&gt;
            <mvc:exclude-mapping path="/swagger-ui.html/**"/>&lt;!&ndash; swagger静态资源&ndash;&gt;
            <bean class="com.fan.interceptors.LoginInterceptor"/>
        </mvc:interceptor>-->
    </mvc:interceptors>

    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/"/>
        <!-- 后缀 -->
        <property name="suffix" value=".jsp"/>
        <!-- Spring不能解析JSTL代码，此配置是为了Spring能解析JSTL代码 -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    </bean>

    <!--注册mvc注释驱动，此配置会造成，当使用完全相同mvc映射地址会导致项目启动报错.如果不启动此配置则无法使用转换器,且在JSR303校验时无法使用国家化配置-->
    <mvc:annotation-driven conversion-service="conversionService" validator="validator"/>

    <!-- 1.注册ConversionService 自定义的转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <!-- 托管的自定义数据类型格式转换器 -->
                <bean class="com.fan.util.DateConverter"/>
                <!--<bean class="cn.javass.chapter7.web.controller.support.converter.StringToDateConverter">
                    <constructor-arg value="yyyy-MM-dd"/>
                </bean>-->
            </set>
        </property>
    </bean>

    <!-- 访问静态资源 -->
    <mvc:default-servlet-handler/>
    <!-- 第一步 mvc字段校验-->
    <bean class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" id="validator">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    <!-- 第二步,国际化配置 -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="config.message"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="3600"/>
    </bean>
    <!-- 第三步 -->
    <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer" id="webBindingInitializer">
        <property name="conversionService" ref="conversionService"/>
        <property name="validator" ref="validator"/>
    </bean>

    <!-- 文件上传下载配置 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 指定所上传文件的总大小不能超过104857600。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="104857600"/>
        <property name="maxInMemorySize" value="4096"/>
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到WebContent目录下的error.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error</prop>
            </props>
        </property>
    </bean>

    <!--session共享-->
    <bean id="redisHttpSessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <property name="maxInactiveIntervalInSeconds" value="600"/>
    </bean>
</beans>
